// Mocks generated by Mockito 5.4.4 from annotations
// in notredame/test/features/app/repository/mocks/user_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// Dart imports:
import 'dart:async' as _i3;

// Package imports:
import 'package:ets_api_clients/models.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// Project imports:
import 'package:notredame/features/app/repository/user_repository.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i2.UserRepository {
  @override
  _i3.Future<bool> authenticate({
    required String? username,
    required String? password,
    bool? isSilent = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #username: username,
            #password: password,
            #isSilent: isSilent,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> silentAuthenticate() => (super.noSuchMethod(
        Invocation.method(
          #silentAuthenticate,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<String> getPassword() => (super.noSuchMethod(
        Invocation.method(
          #getPassword,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getPassword,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getPassword,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<_i5.Program>> getPrograms({bool? fromCacheOnly = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrograms,
          [],
          {#fromCacheOnly: fromCacheOnly},
        ),
        returnValue: _i3.Future<List<_i5.Program>>.value(<_i5.Program>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Program>>.value(<_i5.Program>[]),
      ) as _i3.Future<List<_i5.Program>>);

  @override
  _i3.Future<_i5.ProfileStudent?> getInfo({bool? fromCacheOnly = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInfo,
          [],
          {#fromCacheOnly: fromCacheOnly},
        ),
        returnValue: _i3.Future<_i5.ProfileStudent?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.ProfileStudent?>.value(),
      ) as _i3.Future<_i5.ProfileStudent?>);

  @override
  _i3.Future<bool> wasPreviouslyLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #wasPreviouslyLoggedIn,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
