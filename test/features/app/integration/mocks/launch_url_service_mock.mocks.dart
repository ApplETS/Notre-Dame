// Mocks generated by Mockito 5.4.4 from annotations
// in notredame/test/features/app/integration/mocks/launch_url_service_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// Dart imports:
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

// Package imports:
import 'package:mockito/mockito.dart' as _i1;

// Project imports:
import 'package:notredame/features/more/settings/settings_manager.dart' as _i2;

import 'package:notredame/features/app/integration/launch_url_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsManager_0 extends _i1.SmartFake
    implements _i2.SettingsManager {
  _FakeSettingsManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LaunchUrlService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLaunchUrlService extends _i1.Mock implements _i3.LaunchUrlService {
  @override
  _i2.SettingsManager get settingsManager => (super.noSuchMethod(
        Invocation.getter(#settingsManager),
        returnValue: _FakeSettingsManager_0(
          this,
          Invocation.getter(#settingsManager),
        ),
        returnValueForMissingStub: _FakeSettingsManager_0(
          this,
          Invocation.getter(#settingsManager),
        ),
      ) as _i2.SettingsManager);

  @override
  _i4.Future<bool> canLaunch(String? url) => (super.noSuchMethod(
        Invocation.method(
          #canLaunch,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> launch(String? url) => (super.noSuchMethod(
        Invocation.method(
          #launch,
          [url],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> launchInBrowser(
    String? url,
    _i5.Brightness? brightness,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchInBrowser,
          [
            url,
            brightness,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
