// Mocks generated by Mockito 5.4.4 from annotations
// in notredame/test/features/app/integration/mocks/github_api_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

// Dart imports:
import 'dart:async' as _i5;
import 'dart:io' as _i2;

// Package imports:
import 'package:github/github.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// Project imports:
import 'package:notredame/features/app/integration/github_api.dart' as _i4;

import 'package:notredame/features/more/feedback/models/feedback_issue.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFile_0 extends _i1.SmartFake implements _i2.File {
  _FakeFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIssue_1 extends _i1.SmartFake implements _i3.Issue {
  _FakeIssue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubApi extends _i1.Mock implements _i4.GithubApi {
  @override
  _i5.Future<_i2.File> get localFile => (super.noSuchMethod(
        Invocation.getter(#localFile),
        returnValue: _i5.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.getter(#localFile),
        )),
        returnValueForMissingStub: _i5.Future<_i2.File>.value(_FakeFile_0(
          this,
          Invocation.getter(#localFile),
        )),
      ) as _i5.Future<_i2.File>);

  @override
  void uploadFileToGithub({
    required String? filePath,
    required _i2.File? file,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #uploadFileToGithub,
          [],
          {
            #filePath: filePath,
            #file: file,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Issue> createGithubIssue({
    required String? feedbackText,
    required String? fileName,
    required String? feedbackType,
    String? email,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGithubIssue,
          [],
          {
            #feedbackText: feedbackText,
            #fileName: fileName,
            #feedbackType: feedbackType,
            #email: email,
          },
        ),
        returnValue: _i5.Future<_i3.Issue>.value(_FakeIssue_1(
          this,
          Invocation.method(
            #createGithubIssue,
            [],
            {
              #feedbackText: feedbackText,
              #fileName: fileName,
              #feedbackType: feedbackType,
              #email: email,
            },
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Issue>.value(_FakeIssue_1(
          this,
          Invocation.method(
            #createGithubIssue,
            [],
            {
              #feedbackText: feedbackText,
              #fileName: fileName,
              #feedbackType: feedbackType,
              #email: email,
            },
          ),
        )),
      ) as _i5.Future<_i3.Issue>);

  @override
  _i5.Future<List<_i6.FeedbackIssue>> fetchIssuesByNumbers(
    List<int>? numbers,
    dynamic appIntl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchIssuesByNumbers,
          [
            numbers,
            appIntl,
          ],
        ),
        returnValue:
            _i5.Future<List<_i6.FeedbackIssue>>.value(<_i6.FeedbackIssue>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i6.FeedbackIssue>>.value(<_i6.FeedbackIssue>[]),
      ) as _i5.Future<List<_i6.FeedbackIssue>>);
}
