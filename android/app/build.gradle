plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('keystore.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def debugKeystoreProperties = new Properties()
def debugKeystorePropertiesFile = rootProject.file('debug_keystore.properties')
if (debugKeystorePropertiesFile.exists()) {
    debugKeystoreProperties.load(new FileInputStream(debugKeystorePropertiesFile))
}

def customConfigFile = rootProject.file("config.properties")
def customConfig = new Properties()

if (customConfigFile.exists()) {
    customConfig.load(new FileInputStream(customConfigFile))
}

android {
    namespace = "ca.etsmtl.applets.etsmobile"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        applicationId = "ca.etsmtl.applets.etsmobile"
        minSdkVersion = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        manifestPlaceholders += [
                mapsApiKey: customConfig['MAPS_API_KEY'] ?: "$System.env.MAPS_API_KEY",
                appHash: customConfig['APP_HASH'] ?: "$System.env.APP_HASH"
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseKeyPassword']
            storeFile keystoreProperties['releaseKeyStore'] ? file(keystoreProperties['releaseKeyStore']) : null
            storePassword keystoreProperties['releaseStorePassword']
        }
        debug {
            keyAlias debugKeystoreProperties['debugKeyAlias']
            keyPassword debugKeystoreProperties['debugKeyPassword']
            storeFile debugKeystoreProperties['debugKeyStore'] ? file(debugKeystoreProperties['debugKeyStore']) : null
            storePassword debugKeystoreProperties['debugStorePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
            ext.alwaysUpdateBuildId = false
        }
    }
    lint {
        checkDependencies true
        disable 'InvalidPackage'
    }
}

flutter {
    source = "../.."
}
